# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/tilt/all/tilt.rbi
#
# tilt-1.4.1

module Tilt
  def self.[](file); end
  def self.mappings; end
  def self.new(file, line = nil, options = nil, &block); end
  def self.normalize(ext); end
  def self.prefer(template_class, *extensions); end
  def self.register(template_class, *extensions); end
  def self.registered?(ext); end
end
class Tilt::Template
  def allows_script?; end
  def basename(suffix = nil); end
  def binary(string); end
  def compile_template_method(locals); end
  def compiled_method(locals_keys); end
  def data; end
  def default_encoding; end
  def eval_file; end
  def evaluate(scope, locals, &block); end
  def extract_encoding(script); end
  def extract_magic_comment(script); end
  def file; end
  def initialize(file = nil, line = nil, options = nil, &block); end
  def initialize_engine; end
  def line; end
  def name; end
  def options; end
  def precompiled(locals); end
  def precompiled_postamble(locals); end
  def precompiled_preamble(locals); end
  def precompiled_template(locals); end
  def prepare; end
  def read_template_file; end
  def render(scope = nil, locals = nil, &block); end
  def require_template_library(name); end
  def self.default_mime_type; end
  def self.default_mime_type=(arg0); end
  def self.engine_initialized; end
  def self.engine_initialized=(arg0); end
  def self.engine_initialized?; end
  def unbind_compiled_method(method_name); end
end
class Tilt::StringTemplate < Tilt::Template
  def precompiled(locals); end
  def precompiled_template(locals); end
  def prepare; end
end
class Tilt::ERBTemplate < Tilt::Template
  def initialize_engine; end
  def precompiled(locals); end
  def precompiled_postamble(locals); end
  def precompiled_preamble(locals); end
  def precompiled_template(locals); end
  def prepare; end
  def self.default_output_variable; end
  def self.default_output_variable=(name); end
  def self.engine_initialized?; end
end
class Tilt::ErubisTemplate < Tilt::ERBTemplate
  def initialize_engine; end
  def precompiled(locals); end
  def precompiled_postamble(locals); end
  def precompiled_preamble(locals); end
  def prepare; end
  def self.engine_initialized?; end
end
class Tilt::EtanniTemplate < Tilt::Template
  def precompiled(locals); end
  def precompiled_template(locals); end
  def prepare; end
end
class Tilt::HamlTemplate < Tilt::Template
  def evaluate(scope, locals, &block); end
  def initialize_engine; end
  def precompiled_postamble(locals); end
  def precompiled_preamble(locals); end
  def precompiled_template(locals); end
  def prepare; end
  def self.engine_initialized?; end
end
class Tilt::SassTemplate < Tilt::Template
  def allows_script?; end
  def evaluate(scope, locals, &block); end
  def initialize_engine; end
  def prepare; end
  def sass_options; end
  def self.engine_initialized?; end
end
class Tilt::ScssTemplate < Tilt::SassTemplate
  def sass_options; end
end
class Tilt::LessTemplate < Tilt::Template
  def allows_script?; end
  def evaluate(scope, locals, &block); end
  def initialize_engine; end
  def prepare; end
  def self.engine_initialized?; end
end
class Tilt::CSVTemplate < Tilt::Template
  def initialize_engine; end
  def precompiled(locals); end
  def precompiled_template(locals); end
  def prepare; end
  def self.engine; end
  def self.engine_initialized?; end
end
class Tilt::CoffeeScriptTemplate < Tilt::Template
  def allows_script?; end
  def evaluate(scope, locals, &block); end
  def initialize_engine; end
  def prepare; end
  def self.default_bare; end
  def self.default_bare=(value); end
  def self.default_no_wrap; end
  def self.default_no_wrap=(value); end
  def self.engine_initialized?; end
end
class Tilt::NokogiriTemplate < Tilt::Template
  def evaluate(scope, locals); end
  def initialize_engine; end
  def precompiled_postamble(locals); end
  def precompiled_preamble(locals); end
  def precompiled_template(locals); end
  def prepare; end
  def self.engine_initialized?; end
end
class Tilt::BuilderTemplate < Tilt::Template
  def evaluate(scope, locals, &block); end
  def initialize_engine; end
  def precompiled_postamble(locals); end
  def precompiled_preamble(locals); end
  def precompiled_template(locals); end
  def prepare; end
  def self.engine_initialized?; end
end
class Tilt::MarkabyTemplate < Tilt::Template
  def evaluate(scope, locals, &block); end
  def initialize_engine; end
  def prepare; end
  def self.builder_class; end
  def self.engine_initialized?; end
end
class Tilt::LiquidTemplate < Tilt::Template
  def allows_script?; end
  def evaluate(scope, locals, &block); end
  def initialize_engine; end
  def prepare; end
  def self.engine_initialized?; end
end
class Tilt::RadiusTemplate < Tilt::Template
  def allows_script?; end
  def evaluate(scope, locals, &block); end
  def initialize_engine; end
  def prepare; end
  def self.context_class; end
  def self.engine_initialized?; end
end
class Tilt::RDiscountTemplate < Tilt::Template
  def allows_script?; end
  def evaluate(scope, locals, &block); end
  def flags; end
  def initialize_engine; end
  def prepare; end
  def self.engine_initialized?; end
end
class Tilt::RedcarpetTemplate < Tilt::Template
  def allows_script?; end
  def evaluate(scope, locals, &block); end
  def initialize_engine; end
  def prepare; end
  def self.engine_initialized?; end
end
class Tilt::RedcarpetTemplate::Redcarpet1 < Tilt::RDiscountTemplate
  def prepare; end
  def self.engine_initialized?; end
end
class Tilt::RedcarpetTemplate::Redcarpet2 < Tilt::Template
  def allows_script?; end
  def evaluate(scope, locals, &block); end
  def generate_renderer; end
  def prepare; end
  def self.engine_initialized?; end
end
class Tilt::BlueClothTemplate < Tilt::Template
  def allows_script?; end
  def evaluate(scope, locals, &block); end
  def initialize_engine; end
  def prepare; end
  def self.engine_initialized?; end
end
class Tilt::MarukuTemplate < Tilt::Template
  def allows_script?; end
  def evaluate(scope, locals, &block); end
  def initialize_engine; end
  def prepare; end
  def self.engine_initialized?; end
end
class Tilt::KramdownTemplate < Tilt::Template
  def allows_script?; end
  def evaluate(scope, locals, &block); end
  def initialize_engine; end
  def prepare; end
  def self.engine_initialized?; end
end
class Tilt::RedClothTemplate < Tilt::Template
  def allows_script?; end
  def evaluate(scope, locals, &block); end
  def initialize_engine; end
  def prepare; end
  def self.engine_initialized?; end
end
class Tilt::RDocTemplate < Tilt::Template
  def allows_script?; end
  def evaluate(scope, locals, &block); end
  def initialize_engine; end
  def markup; end
  def prepare; end
  def self.engine_initialized?; end
end
class Tilt::CreoleTemplate < Tilt::Template
  def allows_script?; end
  def evaluate(scope, locals, &block); end
  def initialize_engine; end
  def prepare; end
  def self.engine_initialized?; end
end
class Tilt::WikiClothTemplate < Tilt::Template
  def allows_script?; end
  def evaluate(scope, locals, &block); end
  def initialize_engine; end
  def prepare; end
  def self.engine_initialized?; end
end
class Tilt::YajlTemplate < Tilt::Template
  def decorate(json); end
  def evaluate(scope, locals, &block); end
  def initialize_engine; end
  def precompiled_postamble(locals); end
  def precompiled_preamble(locals); end
  def precompiled_template(locals); end
  def prepare; end
  def self.engine_initialized?; end
end
class Tilt::AsciidoctorTemplate < Tilt::Template
  def allows_script?; end
  def evaluate(scope, locals, &block); end
  def initialize_engine; end
  def prepare; end
  def self.engine_initialized?; end
end
class Tilt::PlainTemplate < Tilt::Template
  def evaluate(scope, locals, &block); end
  def prepare; end
  def self.engine_initialized?; end
end
module Tilt::CompileSite
end
class Tilt::Cache
  def clear; end
  def fetch(*key); end
  def initialize; end
end
